package com.app.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.dto.ErrorResponse;
import com.app.dto.ResponseDTO;
import com.app.pojos.Users;
import com.app.services.IUsersService;


@RestController
@RequestMapping("/users")
public class UsersRestController {
	//dependency :service layer i/f
	@Autowired
	private IUsersService userService;
	public UsersRestController() {
		System.out.println("in ctor "+getClass().getName());
		
	}
	//add REST API endpoint : for getting all users
	@GetMapping
	public List<Users> fetchAllUSers()
	{
		System.out.println("in fetch all users");
		return userService.getAllUsers();
	}
	
	@PostMapping
	public ResponseEntity<?> addNewUserDetails(@RequestBody Users transientUser)
	{
		System.out.println("in add user "+transientUser.toString());
		//invoke service layer's method for saving details
		try {
		return new ResponseEntity<>( userService.addUser(transientUser),HttpStatus.CREATED);
		}catch(RuntimeException e)
		{
			System.out.println("err in add "+e);
			return new ResponseEntity<>( new ErrorResponse("Adding user failed!!!!!",e.getMessage() ), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	//add RESt API to delete user details by id 
	@DeleteMapping("/{userId}")
	public ResponseEntity<ResponseDTO> deleteUserDetails(@PathVariable int userId)//(@PathVariable(name="userId")int id)
	{
		System.out.println("in delete user details " +userId);
		//invoke service layer method for deleting user de tails
		//return new ResponseEntity<>(new ResponseDTO( userService.deleteUser(userId)),HttpStatus.OK);
		return ResponseEntity.ok(new ResponseDTO( userService.deleteUser(userId)));
	}
	
	@GetMapping("/{id}")
	public RsponseEntity<?> getUserDetails(@PathVariable long id)
	{
		System.out.println("in get user detail by id "+id);
		
	}
	
	@PutMapping
	public ResponseEntity<?> updateUSerDetails(@RequestBody Users detachedUSer,@PathVariable long id)
	{
		System.out.println("in update user "+detachedUSer + " "+ id);
		return null;
	}
	
	
	
}
